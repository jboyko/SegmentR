root.p <- c(1,0)
# mk model
Q <- matrix(c(-q01,q01,
q10, -q10), 2, 2, byrow = TRUE)
phy <- tree.bd(c(1,0.5), 100)
phy
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
root.p
Q
phy
phy <- tree.bd(c(1,0.5), 100)
phy
phy <- tree.bd(c(1,0.5), 100)
phy
phy <- tree.bd(c(1,0.5), 100)
phy
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
# bisse model
diversitree:::default.argnames.musse(2)
q12 <- 1
q21 <- 1
root.p <- c(1,0)
# mk model
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(1,0.5), 100) # add a check that makes sure a tree was returned
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
# bisse model
diversitree:::default.argnames.musse(2)
lambda <- 1
mu <- 0.5
pars <- c(lambda1=1, lambda2=1, mu1=0.5, mu2=0.5, q12=1, q21=1)
root.p <- c(1,0)
tree.bisse(pars = pars, max.taxa = 100, x0 = root.p)
tree.bisse(pars = pars, max.taxa = 100, x0 = 1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 1)
bisse_sim_data
bisse_sim_data$tip.state
tip_data <- bisse_sim_data$tip.state
plot(bisse_sim_data)
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, phy)
bisse_sim_data
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 0)
tip_data <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
bisse_sim_data
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 0)
bisse_sim_data
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 0)
bisse_sim_data
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, phy)
plot(h, bisse_sim_data)
tip_data
tip_data <- bisse_sim_data$tip.state
tip_data
tip_data_mk <- mk_sim_data$TipStates
tiplabels(pch=16, col = tip_data_mk)
tip_data_bi
tip_data_bi <- bisse_sim_data$tip.state
# hisse model
diversitree:::default.argnames.musse(4)
# hisse model
diversitree:::default.argnames.musse(4)
phy <- tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
phy
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data_mk <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data_mk)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data_mk <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE, type = "fan")
tiplabels(pch=16, col = tip_data_mk)
plot(phy, show.tip.label = FALSE, type = "fan", no.margin = TRUE)
tiplabels(pch=16, col = tip_data_mk)
# bisse model
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=1, mu1=0.5, mu2=0.5, q12=1, q21=1)
pars <- c(lambda1=1, lambda2=2, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, bisse_sim_data)
plot(h, bisse_sim_data, type = "fan")
plot(h, bisse_sim_data, no.margin = TRUE)
plot(h, bisse_sim_data, no.margin = TRUE)
plot(h, bisse_sim_data, no.margin = TRUE, show.tip.label = FALSE)
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=0.5, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=0.5, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=0.5, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, bisse_sim_data, no.margin = TRUE, show.tip.label = FALSE)
dev.off()
par(mfrow=c(1,2), mar=c(5,5,5,5))
xlim <- c(min(true_lnlik,many_joints$lnliks), max(best_joint_lnlik, many_joints$lnliks))
hist(many_joints$lnliks, main = "lnlik of joint recons", xlab = "lnlik", xlim=xlim)
# abline(v = many_joints$best_lnlik-1.96, col = "red", lwd = 2)
h <- hist(many_joints$lnliks, plot = FALSE) # Histogram data
x_max <- max(h$breaks)
y_max <- max(h$counts)
threshold <- best_joint_lnlik - 1.96
polygon(
x = c(threshold, x_max, x_max, threshold),  # X-coordinates of the rectangle
y = c(0, 0, y_max, y_max),                 # Y-coordinates of the rectangle
col = rgb(1, 0, 0, 0.2),                   # Light red with 20% opacity
border = NA                                # No border for the rectangle
)
abline(v = true_lnlik, col = "blue", lty=2, lwd=3)
abline(v = best_marginal_lnlik, col = "purple", lty=2, lwd=3)
legend("topleft", legend = c("true", "marginal", "-1.96 lnlik"), col = c("blue", "purple", "red"), pch = 16)
perc_correct <- unlist(lapply(many_joints$sampled_joints, function(x) sum(x$anc.states == tru)/length(tru)))*100
plot(many_joints$lnliks, perc_correct, ylim=c(50,100), ylab="% nodes correct", xlim=xlim, pch = 16, col = rgb(0,0,0,0.25))
points(x = best_marginal_lnlik, y = sum(marginal_recon == tru), pch = 16, col = "purple", cex = 2)
points(x = true_lnlik, y = 100, pch = 16, col = "blue", cex = 2)
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
is.binary(phy)
multi2di(phy)
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
phy
multi2di(phy)
plot(phy)
dev.off()
plot(phy, no.margin = TRUE)
out
phy
gen <- corHMM:::FindGenerations(phy)
gen
phy$edge
edge <- phy$edge
edge[,1]
edge[,1]
gen
gen <- corHMM:::FindGenerations(phy)
edge <- phy$edge
edge
gen
r <- matrix(NA, Nnode(phy), 3)
r
Nnode(phy)
gen
unlist(gen)
anc
gen <- corHMM:::FindGenerations(phy)
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
gen
gen <- unlist(corHMM:::FindGenerations(phy))
gen
i
i=
gen[i]
gen[i]
gen
i
i=1
gen[i]
edge[,1] == gen[i]
edge[,2][edge[,1] == gen[i]]
c(edge[,2][edge[,1] == gen[i]], gen[i])
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
r
get_r <- function(phy){
gen <- unlist(corHMM:::FindGenerations(phy))
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
return(r)
}
r <- get_r(phy)
r
reduce_r <- function(phy){
gen <- unlist(corHMM:::FindGenerations(phy))
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
return(r)
}
M
reduce_r <- function(phy){
gen <- unlist(corHMM:::FindGenerations(phy))
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
return(r)
}
M <- reduce_r(phy)
M
gen
gen[[1]]
gen <- (corHMM:::FindGenerations(phy))
gen[[1]]
match(phy$edge[,1], gen[[1]])
match(gen[[1]], phy$edge[,1])
phy$edge[,2][match(gen[[1]], phy$edge[,1])]
keep.tip(phy, phy$edge[,2][match(gen[[1]], phy$edge[,1])])
plot(keep.tip(phy, phy$edge[,2][match(gen[[1]], phy$edge[,1])]))
phy$edge[,2][match(gen[[1]], phy$edge[,1])])
phy$edge[,2][match(gen[[1]], phy$edge[,1])]
gen[[1]]
gen[[1]]
nodelabel.phylo()
nodelabels()
plot(pgt)
phy
plot(phy)
nodelabels()
plot(phy)
nodelabels(node = gen[[1]])
nodelabels(node = gen[[1]], pch = 16)
plot(phy)
nodelabels(node = gen[[1]], pch = 16)
plot(keep.tip(phy, phy$edge[,2][match(gen[[1]], phy$edge[,1])]))
match(gen[[1]], phy$edge[,1])])
match(gen[[1]], phy$edge[,1])
length(match(gen[[1]], phy$edge[,1]))
length(gen[[1]])
r
M
gen <- corHMM:::FindGenerations(phy)
gen
match(gen[[1]], M[,3])
M[match(gen[[1]], M[,3]),]
M[match(gen[[1]], M[,3]),1:2]
keep.tip(phy, M[match(gen[[1]], M[,3]),1:2])
plot(keep.tip(phy, M[match(gen[[1]], M[,3]),1:2]))
read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
phy
plot(phy)
reorder(phy, "postorder")
reorder(phy, "cladewise")
reorder(phy, "pruningwise")
plot(reorder(phy, "pruningwise"))
par(mfrow=c(1,2))
plot(phy)
plot(ladderize(phy))
tmp <- ladderize(phy)
write.tree(tmp, file = "~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned_ladder.tre")
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
par(mfrow=c(1,2))
plot(phy)
tmp <- ladderize(phy)
write.tree(tmp, file = "~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned_ladder.tre")
library(SegmentR)
library(imager)
library(RColorBrewer)
example_data <- load_segmentr_example_data()
setwd("~/SegmentR/")
devtools::load_all()
results <- get_segmentation_paths("~/segmentr-paper/extdata/images")
results
jsons <- load_segmentation_results(results$summary$source_directory)
plot_seg_results(jsons$`257503509.jpeg`)
debug(export_transparent_masks)
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
mask
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
dim(mask)
devtools::load_all()
ground_results <- grounded_segmentation_cli(
image_path = "~/segmentr-paper/extdata/images/257503509.jpeg",
labels = c("a flower", "a bee"))
ground_results <- grounded_segmentation_cli(
image_path = "~/segmentr-paper/extdata/images/257503509.jpeg",
labels = c("a flower", "a bee"))
devtools::load_all()
run_grounded_segmentation("~/segmentr-paper/extdata/images", labels = c("a flower", "a bee"))
jsons <- load_segmentation_results(results$summary$source_directory)
debug(plot_seg_results)
plot_seg_results(jsons$`257503509.jpeg`)
original
plot(original)
mask
plot(mask)
plot(original)
plot(mask)
plot_seg_results(jsons$`257503509.jpeg`)
original
mask
plot(bg, axes=FALSE)
bg, axes=FALSE
bg
plot(mask)
par(mar=c(.1,.1,.1,.1))
plot(bg, axes=FALSE)
jsons <- load_segmentation_results(results$summary$source_directory)
plot_seg_results(jsons$`257503509.jpeg`)
mask
run_grounded_segmentation("~/segmentr-paper/extdata/images", labels = c("a flower", "a bee"))
devtools::load_all()
plot_seg_results(jsons$`258907589.jpeg`)
plot_seg_results(jsons$`259226605.jpeg`)
devtools::load_all()
run_grounded_segmentation("~/segmentr-paper/extdata/images", labels = c("a flower", "a bee"))
jsons <- load_segmentation_results(results$summary$source_directory)
plot_seg_results(jsons$`257503509.jpeg`)
plot_seg_results(jsons$`258907589.jpeg`)
plot_seg_results(jsons$`259226605.jpeg`)
devtools::load_all()
run_grounded_segmentation("~/segmentr-paper/extdata/images", labels = c("a flower", "a bee"))
jsons <- load_segmentation_results(results$summary$source_directory)
results <- get_segmentation_paths("~/segmentr-paper/extdata/images")
jsons <- load_segmentation_results(results$summary$source_directory)
plot_seg_results(jsons$`257503509.jpeg`)
plot_seg_results(jsons$`258907589.jpeg`)
plot_seg_results(jsons$`259226605.jpeg`)
plot_seg_results(jsons$`259663077.jpeg`)
debug(export_transparent_masks)
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
rgba_img
mask
dim(mask)
dim(rgba_img)
ifelse(mask == 1, 1, background_transparency)
rgba_img
rgba_img[,,3] <- ifelse(mask == 1, 1, background_transparency)
rgba_img[,,1:3] <- img_array * mask
rgba_img[,,1:3]
dim(rgba_img[,,1:3])
img_array * mask
img_array
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
devtools::load_all()
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
img_array[,,channel] * mask
rgba_img[,,channel]
dim(rgba_img)
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
dim(rgba_img[,,channel])
dim(img_array[,,channel] * mask)
img_array
dim(img_array)
segmentation$image
rgba_img
img_array[,,1,channel] * mask
img_array[,,1,channel]
dim(img_array[,,1,channel])
dim(mask)
segmentation$mask[[i]]
dim(segmentation$mask[[i]])
devtools::load_all()
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
mask
dim(mask)
img_array[,,channel] * mask
img_array[,,channel]
img_array
img_array[,,,channel]
img_array[,,,channel] * mask
devtools::load_all()
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
devtools::load_all()
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
export_transparent_masks(jsons$`257503509.jpeg`, "~/playground/")
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
export_transparent_image(jsons$`257503509.jpeg`, "~/playground/")
debug(export_transparent_image)
export_transparent_image(jsons$`257503509.jpeg`, "~/playground/")
format
img_dims
transparent_img
img_dims
separate
devtools::load_all()
export_transparent_image(jsons$`257503509.jpeg`, "~/playground/")
region_img
dim(region_img)
label_indices
seg_results$label
label
combined_mask
combined_mask
seg_results$mask[[i]]
dim(seg_results$mask[[i]])
combined_mask
seg_results$image
?imager::load.image
devtools::load_all()
combined_mask
export_transparent_image(jsons$`257503509.jpeg`, "~/playground/")
orig_img
combined_mask
seg_results$mask[[1]]
dim(seg_results$mask[[1]])
dim(seg_results$mask[[1]]))
dim(seg_results$mask[[1]])
devtools::load_all()
export_transparent_image(jsons$`257503509.jpeg`, "~/playground/")
export_transparent_image(jsons$`257503509.jpeg`, "~/playground/")
label_indices
combined_mask
combined_mask
imager::as.cimg(t(seg_results$mask[[i]]))
combined_mask
d_mask | imager::as.cimg(t(seg_results$mask[[i]]))
combined_mask | imager::as.cimg(t(seg_results$mask[[i]]))
orig_img
combined_mask
orig_img * combined_mask
orig_img * combined_mask
jsons <- load_segmentation_results(results$summary$source_directory)
debug(load_segmentation_results)
jsons <- load_segmentation_results(results$summary$source_directory)
debug(load_single_result)
results
devtools::load_all()
devtools::load_all()
jsons <- load_segmentation_results(results$summary$source_directory)
plot_seg_results(jsons$`257503509.jpeg`)
plot_seg_results(jsons$`257503509.jpeg`, mask_alpha = 1)
plot_seg_results(jsons$`257503509.jpeg`, mask_alpha = 0.7)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
