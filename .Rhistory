tmp <- (many_lnliks - many_lnliks[,3] == 0)[,c(1,2)]
conf_matrix <- table(tmp[,1], tmp[,2])
colnames(conf_matrix) <- c("marginal_no", "marginal_yes")
rownames(conf_matrix) <- c("joint_no", "joint_yes")
print(conf_matrix)
conf_matrix <- list(conf_matrix)
out <- c(out, conf_matrix)
}
out
names(out)
names(out) <- nms
out
dev.off()
library(diversitree)
diversitree:::default.argnames.musse(4)
# bisse model
diversitree:::default.argnames.musse(2)
library(corHMM)
# mk model
Q <- matrix(c(-1,1,
1, -1), 2, 2, byrow = TRUE)
Q
root.p <- c(1,0)
tree.bd(c(1,0.5), 100)
phy <- tree.bd(c(1,0.5), 100)
plot(phy)
plot(phy)
phy
phy <- tree.bd(c(1,0.5), 100)
plot(phy)
plot(phy, cex = 0.5)
plot(phy, cex = 0.5, type = "fan")
plot(phy, show.tip.label = FALSE)
?plot.phylo
plot(phy, show.tip.label = FALSE)
root.p
# ?plot.phylo
simMarkov(phy, Q, root.p)
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
mk_sim_data$TipStates
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
mk_sim_data
diversitree:::default.argnames.musse(2)
q01 <- 1
q10 <- 1
# mk model
Q <- matrix(c(-q01,q01,
q10, -q10), 2, 2, byrow = TRUE)
Q
q01 <- 1
q10 <- 1
root.p <- c(1,0)
# mk model
Q <- matrix(c(-q01,q01,
q10, -q10), 2, 2, byrow = TRUE)
phy <- tree.bd(c(1,0.5), 100)
phy
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
root.p
Q
phy
phy <- tree.bd(c(1,0.5), 100)
phy
phy <- tree.bd(c(1,0.5), 100)
phy
phy <- tree.bd(c(1,0.5), 100)
phy
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
# bisse model
diversitree:::default.argnames.musse(2)
q12 <- 1
q21 <- 1
root.p <- c(1,0)
# mk model
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(1,0.5), 100) # add a check that makes sure a tree was returned
# ?plot.phylo
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data)
# bisse model
diversitree:::default.argnames.musse(2)
lambda <- 1
mu <- 0.5
pars <- c(lambda1=1, lambda2=1, mu1=0.5, mu2=0.5, q12=1, q21=1)
root.p <- c(1,0)
tree.bisse(pars = pars, max.taxa = 100, x0 = root.p)
tree.bisse(pars = pars, max.taxa = 100, x0 = 1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 1)
bisse_sim_data
bisse_sim_data$tip.state
tip_data <- bisse_sim_data$tip.state
plot(bisse_sim_data)
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, phy)
bisse_sim_data
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 0)
tip_data <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
bisse_sim_data
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 0)
bisse_sim_data
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 100, x0 = 0)
bisse_sim_data
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, phy)
plot(h, bisse_sim_data)
tip_data
tip_data <- bisse_sim_data$tip.state
tip_data
tip_data_mk <- mk_sim_data$TipStates
tiplabels(pch=16, col = tip_data_mk)
tip_data_bi
tip_data_bi <- bisse_sim_data$tip.state
# hisse model
diversitree:::default.argnames.musse(4)
# hisse model
diversitree:::default.argnames.musse(4)
phy <- tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
phy
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
tree.bd(c(lambda,mu), 100) # add a check that makes sure a tree was returned
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data_mk <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE)
tiplabels(pch=16, col = tip_data_mk)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
q12 <- 1
q21 <- 1
lambda <- 1
mu <- 0.5
root.p <- c(1,0)
Q <- matrix(c(-q12,q12,
q21, -q21), 2, 2, byrow = TRUE)
phy <- tree.bd(c(lambda,mu), 1000) # add a check that makes sure a tree was returned
mk_sim_data <- simMarkov(phy, Q, root.p)
tip_data_mk <- mk_sim_data$TipStates
plot(phy, show.tip.label = FALSE, type = "fan")
tiplabels(pch=16, col = tip_data_mk)
plot(phy, show.tip.label = FALSE, type = "fan", no.margin = TRUE)
tiplabels(pch=16, col = tip_data_mk)
# bisse model
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=1, mu1=0.5, mu2=0.5, q12=1, q21=1)
pars <- c(lambda1=1, lambda2=2, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, bisse_sim_data)
plot(h, bisse_sim_data, type = "fan")
plot(h, bisse_sim_data, no.margin = TRUE)
plot(h, bisse_sim_data, no.margin = TRUE)
plot(h, bisse_sim_data, no.margin = TRUE, show.tip.label = FALSE)
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=0.5, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=0.5, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
diversitree:::default.argnames.musse(2)
pars <- c(lambda1=1, lambda2=0.5, mu1=0.5, mu2=0.5, q12=1, q21=1)
bisse_sim_data <- tree.bisse(pars = pars, max.taxa = 1000, x0 = 0)
tip_data_bi <- bisse_sim_data$tip.state
h <- history.from.sim.discrete(bisse_sim_data, 0:1)
plot(h, bisse_sim_data, no.margin = TRUE, show.tip.label = FALSE)
dev.off()
par(mfrow=c(1,2), mar=c(5,5,5,5))
xlim <- c(min(true_lnlik,many_joints$lnliks), max(best_joint_lnlik, many_joints$lnliks))
hist(many_joints$lnliks, main = "lnlik of joint recons", xlab = "lnlik", xlim=xlim)
# abline(v = many_joints$best_lnlik-1.96, col = "red", lwd = 2)
h <- hist(many_joints$lnliks, plot = FALSE) # Histogram data
x_max <- max(h$breaks)
y_max <- max(h$counts)
threshold <- best_joint_lnlik - 1.96
polygon(
x = c(threshold, x_max, x_max, threshold),  # X-coordinates of the rectangle
y = c(0, 0, y_max, y_max),                 # Y-coordinates of the rectangle
col = rgb(1, 0, 0, 0.2),                   # Light red with 20% opacity
border = NA                                # No border for the rectangle
)
abline(v = true_lnlik, col = "blue", lty=2, lwd=3)
abline(v = best_marginal_lnlik, col = "purple", lty=2, lwd=3)
legend("topleft", legend = c("true", "marginal", "-1.96 lnlik"), col = c("blue", "purple", "red"), pch = 16)
perc_correct <- unlist(lapply(many_joints$sampled_joints, function(x) sum(x$anc.states == tru)/length(tru)))*100
plot(many_joints$lnliks, perc_correct, ylim=c(50,100), ylab="% nodes correct", xlim=xlim, pch = 16, col = rgb(0,0,0,0.25))
points(x = best_marginal_lnlik, y = sum(marginal_recon == tru), pch = 16, col = "purple", cex = 2)
points(x = true_lnlik, y = 100, pch = 16, col = "blue", cex = 2)
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
is.binary(phy)
multi2di(phy)
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
phy
multi2di(phy)
plot(phy)
dev.off()
plot(phy, no.margin = TRUE)
out
phy
gen <- corHMM:::FindGenerations(phy)
gen
phy$edge
edge <- phy$edge
edge[,1]
edge[,1]
gen
gen <- corHMM:::FindGenerations(phy)
edge <- phy$edge
edge
gen
r <- matrix(NA, Nnode(phy), 3)
r
Nnode(phy)
gen
unlist(gen)
anc
gen <- corHMM:::FindGenerations(phy)
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
gen
gen <- unlist(corHMM:::FindGenerations(phy))
gen
i
i=
gen[i]
gen[i]
gen
i
i=1
gen[i]
edge[,1] == gen[i]
edge[,2][edge[,1] == gen[i]]
c(edge[,2][edge[,1] == gen[i]], gen[i])
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
r
get_r <- function(phy){
gen <- unlist(corHMM:::FindGenerations(phy))
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
return(r)
}
r <- get_r(phy)
r
reduce_r <- function(phy){
gen <- unlist(corHMM:::FindGenerations(phy))
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
return(r)
}
M
reduce_r <- function(phy){
gen <- unlist(corHMM:::FindGenerations(phy))
edge <- phy$edge
r <- matrix(NA, Nnode(phy), 3)
for(i in 1:Nnode(phy)){
r[i,] <- c(edge[,2][edge[,1] == gen[i]], gen[i])
}
return(r)
}
M <- reduce_r(phy)
M
gen
gen[[1]]
gen <- (corHMM:::FindGenerations(phy))
gen[[1]]
match(phy$edge[,1], gen[[1]])
match(gen[[1]], phy$edge[,1])
phy$edge[,2][match(gen[[1]], phy$edge[,1])]
keep.tip(phy, phy$edge[,2][match(gen[[1]], phy$edge[,1])])
plot(keep.tip(phy, phy$edge[,2][match(gen[[1]], phy$edge[,1])]))
phy$edge[,2][match(gen[[1]], phy$edge[,1])])
phy$edge[,2][match(gen[[1]], phy$edge[,1])]
gen[[1]]
gen[[1]]
nodelabel.phylo()
nodelabels()
plot(pgt)
phy
plot(phy)
nodelabels()
plot(phy)
nodelabels(node = gen[[1]])
nodelabels(node = gen[[1]], pch = 16)
plot(phy)
nodelabels(node = gen[[1]], pch = 16)
plot(keep.tip(phy, phy$edge[,2][match(gen[[1]], phy$edge[,1])]))
match(gen[[1]], phy$edge[,1])])
match(gen[[1]], phy$edge[,1])
length(match(gen[[1]], phy$edge[,1]))
length(gen[[1]])
r
M
gen <- corHMM:::FindGenerations(phy)
gen
match(gen[[1]], M[,3])
M[match(gen[[1]], M[,3]),]
M[match(gen[[1]], M[,3]),1:2]
keep.tip(phy, M[match(gen[[1]], M[,3]),1:2])
plot(keep.tip(phy, M[match(gen[[1]], M[,3]),1:2]))
read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
phy
plot(phy)
reorder(phy, "postorder")
reorder(phy, "cladewise")
reorder(phy, "pruningwise")
plot(reorder(phy, "pruningwise"))
par(mfrow=c(1,2))
plot(phy)
plot(ladderize(phy))
tmp <- ladderize(phy)
write.tree(tmp, file = "~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned_ladder.tre")
phy <- read.tree("~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned.tre")
par(mfrow=c(1,2))
plot(phy)
tmp <- ladderize(phy)
write.tree(tmp, file = "~/llm-phylo/trees/squamates_Title_Science2024_ultrametric_constrained_pruned_ladder.tre")
# library(SegmentR)
library(imager)
setwd("~/SegmentR/")
devtools::load_all()
seg_res <- load_segmentation_results(results$image_path)
results <- get_segmentation_paths("~/segmentr-paper/extdata/images/other_images/HornedBream.jpg")
results
seg_res <- load_segmentation_results(results$image_path)
seg_res
plot_seg_results(seg_res)
plot_seg_results(seg_res)
plot_seg_results(remove_mask(seg_res, 2))
img <- readImage(results$image_path, resize = NULL, rotate = NULL)
library(recolorize)
layout(matrix(1:4, nrow = 2))
par(mar = c(1, 0, 1, 0))
img <- readImage(results$image_path, resize = NULL, rotate = NULL)
plotImageArray(img, main = "Original image", cex.main = 5)
# plot_seg_results(seg_res)
plot_seg_results(remove_mask(seg_res, 2))
# plot_seg_results(seg_res)
plot_seg_results(remove_mask(seg_res, 2), main = "Segmented image")
layout(matrix(1:4, nrow = 2))
par(mar = c(1, 0, 1, 0))
img <- readImage(results$image_path, resize = NULL, rotate = NULL)
plotImageArray(img, main = "Original image", cex.main = 5)
seg_tbl <- create_segmentation_table(seg_res)
seg_tbl
export_transparent_png(input = seg_res, output_path = "~/segmentr-paper/extdata/exported_segments/", remove_overlap = TRUE, crop = TRUE)
export_transparent_png(input = seg_res, prefix = "full_bream", output_path = "~/segmentr-paper/extdata/exported_segments/", remove_overlap = FALSE, crop = TRUE)
full_bream <- readImage("~/segmentr-paper/extdata/exported_segments/HornedBream_001_a fish..png", resize = NULL, rotate = NULL)
plotImageArray(img, main = "Original image")
plotImageArray(full_bream, main = "Original image")
full_bream
plotImageArray(full_bream, main = "Original image")
pdf("~/segmentr-paper/figures/in-progress/example-1-original.pdf", width = 10, height = 7)
plotImageArray(img, main = "Original image")
dev.off()
pdf("~/segmentr-paper/figures/in-progress/example-1-segmented.pdf", width = 10, height = 7)
plot_seg_results(remove_mask(seg_res, 2), main = "Segmented image")
dev.off()
seg_res <- remove_mask(seg_res, 2)
export_transparent_png(input = seg_res, output_path = "~/segmentr-paper/extdata/exported_segments/", remove_overlap = TRUE, crop = TRUE)
export_transparent_png(input = seg_res, prefix = "full_bream", output_path = "~/segmentr-paper/extdata/exported_segments/", remove_overlap = FALSE, crop = TRUE)
pdf("~/segmentr-paper/figures/in-progress/example-1-segmented.pdf", width = 10, height = 7)
plot_seg_results(seg_res, main = "Segmented image")
dev.off()
img <- readImage(results$image_path, resize = NULL, rotate = NULL)
pdf("~/segmentr-paper/figures/in-progress/example-1-original.pdf", width = 10, height = 7)
plotImageArray(img, main = "")
dev.off()
pdf("~/segmentr-paper/figures/in-progress/example-1-segmented.pdf", width = 10, height = 7)
plot_seg_results(seg_res, main = "å")
dev.off()
pdf("~/segmentr-paper/figures/in-progress/example-1-segmented.pdf", width = 10, height = 7)
plot_seg_results(seg_res, main = "")
dev.off()
dev.off()
image_paths <- list.files(
system.file("extdata", "images", package = "SegmentR"),
full.names = TRUE
)
image_paths
image_paths_2 <- list.files(
system.file("extdata", "images", package = "SegmentR"),
full.names = TRUE
)
image_paths_1 <- list.files(
system.file("extdata", "images", "other_images", package = "SegmentR"),
full.names = TRUE
)
image_paths_1
image_paths_2
image_paths_2 <- list.files(
system.file("extdata", package = "SegmentR"),
full.names = TRUE
)
image_paths_2
image_paths_1
grep("Bream", image_paths_1)
image_paths_1 <- [grep("Bream", image_paths_1)]
image_paths_1 <- list.files(
system.file("extdata", "images", "other_images", package = "SegmentR"),
full.names = TRUE
)
image_paths_1 <- image_paths_1[grep("Bream", image_paths_1)]
image_paths_2 <- list.files(
system.file("extdata", package = "SegmentR"),
full.names = TRUE
)
image_paths_2
image_paths_2 <- image_paths_2[grep("images", image_paths_1)]
image_paths_2
image_paths_2 <- list.files(
system.file("extdata", package = "SegmentR"),
full.names = TRUE
)
image_paths_2 <- image_paths_2[grep("images", image_paths_2)]
image_paths_2
photographer_credits <- c(
"Horned Bream" = "https://www.inaturalist.org/observations/227272077",
"Lesser Fringed Gentian" = "https://www.inaturalist.org/observations/249435672"
"Flat-topped Goldenrod" = "https://www.inaturalist.org/observations/243695619"
r
photographer_credits <- c(
"Horned Bream" = "https://www.inaturalist.org/observations/227272077",
"Lesser Fringed Gentian" = "https://www.inaturalist.org/observations/249435672",
"Flat-topped Goldenrod" = "https://www.inaturalist.org/observations/243695619",
"Calico Aster" = "https://www.inaturalist.org/observations/242477360",
"Black-eyed Susan" = "https://www.inaturalist.org/observations/243146103"
# Add more credits here
)
photographer_credits
getwd()
devtools::load_all()
load_segmentr_example_data()
devtools::document()
library(SegmentR)
library(imager)
library(RColorBrewer)
example_data <- load_segmentr_example_data()
example_data
example_data$image_paths_1
results <- get_segmentation_paths(example_data$image_paths_1)
seg_res <- load_segmentation_results(results$image_path)
plot_seg_results(seg_res, main = "")
plot_seg_results(remove_mask(seg_res, 2), main = "")
